#!/usr/bin/env python3
# -*- coding: utf-8 -*-

""" 
    NOTE: Some code was generated by ChatGPT. Most of the bulk functions were created by me, PineCone.

    Project Name: Python Video Downloader with yt-dlp support
    Date of Creation: 1/15/2023
    Last Updated: 1/3/25
    Python Version: Supports 3.7+
    Version: 1.13

    Updates:

        * Fixed a bug where JSON Data was not decoded properly by forcing the script to log-in and attempt to download the video.
        Check the Relase page for more information.
"""

# Load startup libraries

import os
import platform
import shutil
import subprocess
import sys
import time
import webbrowser

from pathlib import Path

# Changes the working directory to the running script directory and turns slashes into backslashes

os.chdir(Path(__file__).parent.resolve())

# Used to filter out non-media files

file_types = (".jpeg", "jpg", ".png", ".gif", ".mp4", ".webm")

def clear():
    # Clear the screen

    command = 'clear' # Unix
    if platform.system() == "Windows": command = 'cls' # Windows
    os.system(command)

    title()

def check_cookies(uri):
    # A website may require authentication in order to download media. This function checks Firefox and Chrome to determine if the website has
    # an active session. Other browsers are pending.

    # Chrome has decided to become "secure" and prevent outside sources from accessing cookies. 
    # A fix for Windows devices involves using an extension to create a cookies.txt file, then pass that file using the --cookies option in yt-dlp.
    # A more simpler solution is to alert the user they should use Firefox instead.

    if platform.system() == "Windows":
        browsers = ["firefox"]
    else:
        browsers = ["chrome", "firefox"]
    
    counter = 0
    error_flag = ""

    # We try to download the URI using Chrome or Firefox by passing the respective name into yt-dlp

    while True:
        try:
            ydl_opts["cookiesfrombrowser"] = [browsers[counter], None, None, None]
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([uri])

            error_flag = "success"

            break

        except PermissionError:
            clear()

            print(term.brown1 + "ERROR: 'Chrome is Dumb':" + term.normal, 
                  "Due to recent updates, external programs are unable to access cookies from Google Chrome unless the browser is closed.\n\n" + 
                  "If you wish to download the current URL, please close Google Chrome fully and type 'retry'. Otherwise press enter to skip it.\n\n" +
                  "You may type 'suppress' to suppress future errors.")
            
            user_input = input(">> ")

            if user_input.lower() == "suppress":
                return "suppress"
            elif user_input.lower() == "retry":
                continue
            elif user_input.lower() == "":
                return "no_permission"
            else:
                clear()

                print("An invalid entry was deteced. Please try again.", end='')
                countdown(3)
                continue
            
        except FileNotFoundError:
            error_flag = "no_browser"
            counter = counter + 1
        except yt_dlp.DownloadError:
            error_flag = "no_session"
            counter = counter + 1

        if counter == 1 and platform.system() == "Windows":
            clear()

            print("I have deteced a Windows system with no valid session for the website you are trying to access.\n\n" +
                  "A recent update for Chrome has renedered cookies innaccessable by outside programs. Fixes include using Linux or using Firefox.\n\n" +
                  "A more time consuming fix is to download an extension to create a cookies.txt file that contains Netscape cookie format files, then pass " +
                  "that file to yt-dlp.\n\nYou will not be able to download videos that require authentication unless you use Firefox to sign in or " +
                  "switch to Linux.\n\nPress Enter to continue. If you wish to suppress these error messages, type 'suppress'\n\n")
            
            user_input = input(">> ")

            return user_input

        if counter == 2:
            break
    
    return error_flag

def countdown(i):
    # Print a countdown timer by getting the location of the cursor and moving one unit on the X axis, 
    # then using a while loop to decriment the specified time
    cur_location = term.get_location()
    W = cur_location[1]
    H = cur_location[0]
    
    while i >= 0:
        print(term.move_xy(W + 1,H) + "(" + str(i) + ")")
        time.sleep(1)
        i = i - 1

def countStrings(text):
    # Counts chars in a list
    # num - counter
    # res - result
    # ele - element

    num = 0
    res = char.str_len(text)
    for ele in res:
        num = num + ele

    return num

def downloadMultipleImages():
    
    non_file = True
    media_path = os.getcwd()
    out_path = str(Path(media_path + r'/output'))
    url_txt_path = str(Path(media_path + r"/URL.txt"))
    uri_list= list()
    current_pos = 1

    while non_file:

        # Open URL.txt and create a list of URL's
        if os.path.isfile(url_txt_path):
            with open(url_txt_path, 'r') as file:
                lines = file.readlines()

            for line in lines:
                if '?format=jpg&name=small' in line:
                    # Replace '?format=jpg&name=small' with '?format=png'
                    updated_line = line.replace('?format=jpg&name=small', '?format=png')
                    uri_list.append(updated_line.strip())
                elif '?format=jpg&name=360x360' in line:
                    # Replace '?format=jpg&name=360x360' with '?format=png'
                    updated_line = line.replace('?format=jpg&name=360x360', '?format=png')
                    uri_list.append(updated_line.strip())
                else:
                    uri_list.append(line.strip())
                
            total_urls = len(uri_list)

            if total_urls == 0:
                clear()

                text = ["There were no URL's found in", "URL.txt.", "Please make sure that there are URL's and that you have read/write permissions" +
                "set correctly.", "Press enter to return to the menu."]

                # Output:

                # There were no URL's found in URL.txt. Please make sure that there are URL's and that you have read/write permissions"
                # set correctly.
                # Press enter to return to the main menu
                
                print(
                    term.move_xy(int(W/2 - 130/2), int(H/2 - 1)) + text[0],
                    term.cadetblue1 + text[1] + term.normal,
                    text[2],
                    term.move_xy(int(W/2 - len(text[3])/2), int(H/2 + 1)) + text[3]
                    )

                input("")
                break  
            
            # For each URL, download the media and determine if it needs compression
            for uri in uri_list:
                if validators.url(uri):
                    text = ["URI Found:"]

                    # Output:

                    # URI Found: $uri
                    # $current_pos out of $total_urls
                    #[yt-dlp]
                    
                    clear()
                    print(
                        term.move_xy(int(W/2 - len(text[0])/2), int(H/2 - 2)) + text[0],
                        term.move_xy(int(W/2 - len(uri)/2), int(H/2)) + term.cadetblue1 + uri + term.normal,
                        term.move_xy(int(W/2 - (len(str(current_pos)) + len(str(total_urls)) + 10)/2), int(H/2 + 2)), current_pos, "out of", total_urls
                    )

                    time.sleep(1)

                    # Download the image and name the file using the current time.
                    print("[PID]\nRequesting image...")
                    img_data = requests.get(uri).content
                    now = datetime.now()
                    filename = now.strftime("%m%d%y-%I%M%S")
                    
                    print("Writing file...")
                    f = open(str(filename + str(now.microsecond)[:2] + ".png"), 'wb')
                    f.write(img_data)
                    f.close()
                    print("Closing file...")
                    time.sleep(1)

                    current_pos = current_pos + 1

            filename_list = getListOfFiles(media_path)
            
            for filename in filename_list:
                downloaded_file = str(Path(out_path + r'/' + filename))
                shutil.move(filename, downloaded_file)
        else:
            clear()
            text = ["URL.txt", "was not found. Please create", "and try again.", "Press enter to continue."]

            # Output:

            # URL.txt was not found.
            # Please create URL.txt and try again.
            # Press enter to continue

            print(
                term.move_xy(int(W/2 - 59/2), int(H/2 - 1)), term.cadetblue1 + text[0] + term.normal, 
                text[1],
                term.cadetblue1 + text[0] + term.normal,
                text[2],
                term.move_xy(int(W/2 - len(text[3])/2), int(H/2 + 1)), text[3], end='')
            input()
            return

        clear()

        text = ["Procedure complete.", "Downloaded media has been saved to:", "Press enter to continue"]

        # Output:

        # Procedure Complete.
        # Downloaded media has been saved to: $path
        # Press enter to continue
        print(
            term.move_xy(int(W/2 - len(text[0])/2), int(H/2 - 3)) + text[0], 
            term.move_xy(int(W/2 - (len(text[1]) + len(out_path))/2), int(H/2 - 1)) + term.palegreen + text[1], term.cadetblue1 + out_path + term.normal,
            term.move_xy(int(W/2 - len(text[2])/2), int(H/2 + 1)) + text[2], end='')
        input()

        clear()

        text = ["Would you like to clear", "URL.txt", "?", "(y/n)"]

        print(term.move_xy(int(W/2 - countStrings(text)/2), int(H/2 + 1)), 
            term.palegreen + text[0], 
            term.cadetblue1 + text[1] + term.palegreen + text[2], 
            text[3] + term.normal, "\n"
            )

        user_input = input(">> ")

        if user_input.lower() == "yes" or user_input == "y":
            with open(url_txt_path, 'w') as file:
                file.write("")

            clear()

            text = ["URL.txt", "has been cleared. Exiting in"]

            print(term.move_xy(int(W/2 - countStrings(text)/2), int(H/2 + 1)), 
                    term.cadetblue1 + text[0], 
                    term.palegreen + text[1] + term.normal, end='')

        elif user_input.lower() == "no" or user_input == "n" or user_input == "":

            clear()

            text = ["URL.txt", "has", "NOT", "been cleared. Exiting in"]

            print(
                term.move_xy(int(W/2 - countStrings(text)/2), int(H/2 + 1)),
            term.cadetblue1 + text[0],
            term.palegreen + text[1],
            term.red + text[2], 
            term.palegreen + text[3] + term.normal, end='')

        countdown(3)
        clear()

        break

def downloadMultipleVideos(x):

    error_message = ""
    non_file = True
    media_path = os.getcwd()
    out_path = str(Path(media_path + r'/output'))
    url_txt_path = str(Path(media_path + r"/URL.txt"))
    unhand_url_txt_path = str(Path(media_path + r"/Unsupported URLs.txt"))
    unhandled_urls = list()
    uri_list= list()
    current_pos = 1
        
    while non_file:
        if x != 1:
            clear()

        # Open URL.txt and create a list of URL's
        if os.path.isfile(url_txt_path):
            with open(url_txt_path, 'r') as file:
                lines = file.readlines()

            for line in lines:
                uri_list.append(line.strip())

            total_urls = len(uri_list)

            if total_urls == 0:
                clear()

                text = ["There were no URL's found in", "URL.txt.", "Please make sure that there are URL's and that you have read/write permissions " +
                "set correctly.", "Press enter to return to the menu."]

                # Output:

                # There were no URL's found in URL.txt. Please make sure that there are URL's and that you have read/write permissions"
                # set correctly.
                # Press enter to return to the main menu
                
                print(
                    term.move_xy(int(W/2 - 130/2), int(H/2 - 1)) + text[0],
                    term.cadetblue1 + text[1] + term.normal,
                    text[2],
                    term.move_xy(int(W/2 - len(text[3])/2), int(H/2 + 1)) + text[3]
                    )

                input("")
                break  
            
            # For each URL, download the media and determine if it needs compression
            for uri in uri_list:
                if validators.url(uri):
                    text = ["URI Found:", "[yt-dlp]"]

                    # Output:

                    # URI Found: $uri
                    # $current_pos out of $total_urls
                    #[yt-dlp]

                    
                    clear()
                    print(
                        term.move_xy(int(W/2 - len(text[0])/2), int(H/2 - 2)) + text[0],
                        term.move_xy(int(W/2 - len(uri)/2), int(H/2)) + term.cadetblue1 + uri + term.normal,
                        term.move_xy(int(W/2 - (len(str(current_pos)) + len(str(total_urls)) + 10)/2), int(H/2 + 2)), current_pos, "out of", total_urls,
                        "\n\n" + text[1]
                    )

                    time.sleep(1)
                    ydl_opts["cookiesfrombrowser"] = None

                    # Download the media file using the parameters set in ydl_opts, then increment current_pos by 1
                    try:
                        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                            ydl.download([uri])
                        current_pos = current_pos+1
                    except FileExistsError:
                        os.remove(filename)
                        current_pos = current_pos+1
                    except PermissionError as e:
                        error_message = errorHandler(e.args[0], uri)

                        if error_message == "success":
                            current_pos = current_pos+1
                            continue

                        current_pos = current_pos+1

                        clear()
                        text = "ERROR: unable to download last URL, skipping."

                        print(term.move_xy(int(W/2 - len(text)/2), int(H/2)) + term.brown1 + text + term.normal, end='')
                        countdown(3)
                    except yt_dlp.DownloadError as e:
                        error_message = errorHandler(e.args[0], uri)

                        if error_message == "success":
                            current_pos = current_pos+1
                            continue

                        current_pos = current_pos+1

                        clear()
                        text = "ERROR: unable to download last URL, skipping."

                        print(term.move_xy(int(W/2 - len(text)/2), int(H/2)) + term.brown1 + text + term.normal, end='')
                        countdown(3)
                    except Exception as e:
                        try:
                            if error_message != "suppress":
                                error_message = errorHandler(e.args[0], uri)
                                unhandled_urls.append(uri + "\n")
                            current_pos = current_pos+1
                        except UnboundLocalError:
                            clear()
                            print("A fatal error has occured. The URL cannot be downloaded because:\n")
                            print(str(e) + "\n")
                            print("Please create an issue at the GitHub support page for this program. If the error is self-explanitory, " +
                                    "creating an issue is NOT required.\n")
                            print("GitHub support page: https://github.com/jose011974/Python-Video-Downloader/issues\n")
                            print("Press enter to continue.\n")
                            input()

                            if error_message == "success":
                                current_pos = current_pos+1
                                continue

                            current_pos = current_pos+1

                            clear()
                            text = "ERROR: unable to download last URL, skipping."

                            print(term.move_xy(int(W/2 - len(text)/2), int(H/2)) + term.brown1 + text + term.normal, end='')
                            countdown(3)

            filename_list = getListOfFiles(media_path)

            # Iterate through the file list and move the media to the 'output' folder
            for filename in filename_list:
                file_path = str(Path(os.path.dirname(filename)))
                downloaded_file = str(Path(out_path + r'/' + filename))

                shutil.move(filename, downloaded_file)
        else:
            clear()
            text = ["URL.txt", "was not found. Please create", "and try again.", "Press enter to continue."]

            # Output:

            # URL.txt was not found.
            # Please create URL.txt and try again.
            # Press enter to continue

            print(
                term.move_xy(int(W/2 - 59/2), int(H/2 - 1)), term.cadetblue1 + text[0] + term.normal, 
                text[1],
                term.cadetblue1 + text[0] + term.normal,
                text[2],
                term.move_xy(int(W/2 - len(text[3])/2), int(H/2 + 1)), text[3], end='')
            input()
            return

        clear()

        text = ["Procedure complete.", "Downloaded media has been saved to:", "Press enter to continue"]

        # Output:

        # Procedure Complete.
        # Downloaded media has been saved to: $path
        # Press enter to continue
        print(
            term.move_xy(int(W/2 - len(text[0])/2), int(H/2 - 3)) + text[0], 
            term.move_xy(int(W/2 - (len(text[1]) + len(out_path))/2), int(H/2 - 1)) + term.palegreen + text[1], term.cadetblue1 + out_path + term.normal,
            term.move_xy(int(W/2 - len(text[2])/2), int(H/2 + 1)) + text[2], end='')
        input()

        if len(unhandled_urls) > 0:

            unsupportedURL = open(unhand_url_txt_path, "w")
            unsupportedURL.writelines(unhandled_urls)
            unsupportedURL.close()

            text = ["Unsaved URLs have been saved to", "Unsupported URLs.txt", "Press enter to continue."]
            
            # Output:

            # Unsaved URLs have been saved to
            # $path/Unsupported URLs.txt
            # Press enter to continue

            print(
                term.move_xy(int(W/2 - (len(text[0]) + len(media_path) + len(text[1]))/2), int(H/2 + 1)) + term.palegreen + text[0] + term.cadetblue1  + ":", 
                media_path + r'/' + text[1]  + term.normal,
                term.move_xy(int(W/2 - len(text[2])/2), int(H/2 + 3)) + text[2], end='')
            input()

        clear()

        text = ["Would you like to clear", "URL.txt", "?", "(y/n)"]

        print(term.move_xy(int(W/2 - countStrings(text)/2), int(H/2 + 1)), 
            term.palegreen + text[0], 
            term.cadetblue1 + text[1] + term.palegreen + text[2], 
            text[3] + term.normal, "\n"
            )
        
        user_input = input(">> ")
        
        if user_input.lower() == "yes" or user_input == "y":
            with open(url_txt_path, 'w') as file:
                file.write("")

            clear()

            text = ["URL.txt", "has been cleared. Returning to main menu in"]

            print(term.move_xy(int(W/2 - countStrings(text)/2), int(H/2 + 1)), 
                  term.cadetblue1 + text[0], 
                  term.palegreen + text[1] + term.normal, end='')

        elif user_input.lower() == "no" or user_input == "n" or user_input == "":

            clear()

            text = ["URL.txt", "has", "NOT", "been cleared. Returning to main menu in"]

            print(
                term.move_xy(int(W/2 - countStrings(text)/2), int(H/2 + 1)),
            term.cadetblue1 + text[0],
            term.palegreen + text[1],
            term.red + text[2], 
            term.palegreen + text[3] + term.normal, end='')

        countdown(3)

        break

def downloadSingleImage():

    media_path = os.getcwd()
    out_path = str(Path(media_path + r'/output'))
    not_a_file = True
    error_message = ""
    
    clear()
    
    while not_a_file:

        # This url is no longer active. If anyone manages to find what this image was, let me know!
        # https://static1.e621.net/data/sample/89/85/8985342ea8ff4e4c4692f55e082aadb1.jpg

        url = "https://static1.e621.net/data/e9/3d/e93d6b83f964b3f85e4716c8a862ca67.png"
        print(
            "Please enter a URL, then press enter.\n\nTo return to the main menu, type 'menu', then press enter.\n\n" +
            "Example URL:", term.link(url, url), "\n" + term.move_right(13) + "(CTRL click to open)", end='\n\n'
            )

        uri = input(">> ")

        if uri.lower() == "menu":
            return

        # Check if the URL is valid
        if not validators.url(uri):
            clear()
            print(term.brown1 + "The URL is not valid. Please check the syntax and try again.", term.normal, end='')
            countdown(3)
            clear()
            continue
        else:
            # This snippet allows the text in the tuple to accomodate various URI sizes.
            clear()
            text = ["URI found:", uri, "| Downloading..."]
            num = countStrings(text)
            print(term.move_xy(int(W/2 - num/2), int(H/2)), text[0], term.cadetblue1 + text[1], term.normal + text[2])

            if '?format=jpg&name=small' in uri:
                # Replace '?format=jpg&name=small' with '?format=png'
                new_uri = uri.replace('?format=jpg&name=small', '?format=png')
            elif '?format=jpg&name=360x360' in uri:
                # Replace '?format=jpg&name=360x360' with '?format=png'
                new_uri = uri.replace('?format=jpg&name=360x360', '?format=png')

            try:
                # Download the image and name the file using the current time.
                print("[PID]\nRequesting image...")
                img_data = requests.get(new_uri).content
                now = datetime.now()
                current_time = now.strftime("%m%d%y-%I%M%S")
                filename = str(Path(current_time + str(now.microsecond)[:2] + ".png"))
                
                print("Writing file...")
                f = open(filename, 'wb')
                f.write(img_data)
                f.close()
                print("Closing file...")
                time.sleep(1)

                downloaded_file = str(Path(out_path + r'/' + filename))
                shutil.move(filename, downloaded_file)
                    
            except FileExistsError:
                os.remove(filename)
            except PermissionError as e:
                error_message = errorHandler(e.args[0], uri)

                if error_message == "success":
                    error_message = ""
            except Exception as e:
                clear()
                print("A fatal error has occured. The URL cannot be downloaded because:\n")
                print(str(e) + "\n")
                print("Please create an issue at the GitHub support page for this program. If the error is self-explanitory, " +
                        "creating an issue is NOT required.\n")
                print("GitHub support page: https://github.com/jose011974/Python-Video-Downloader/issues\n")
                print("Press enter to continue.\n")
                input()

                clear()
                text = "ERROR: unable to download last URL, skipping."

                print(term.move_xy(int(W/2 - len(text)/2), int(H/2)) + term.brown1 + text + term.normal, end='')
                countdown(3)
    
        clear()

        text = ["Procedure complete.", "Downloaded media has been saved to:", "Press enter to continue"]

        # Output:

        # Procedure Complete.
        # Downloaded media has been saved to: $path
        # Press enter to continue
        print(
            term.move_xy(int(W/2 - len(text[0])/2), int(H/2 - 3)) + text[0], 
            term.move_xy(int(W/2 - (len(text[1]) + len(out_path))/2), int(H/2 - 1)) + term.palegreen + text[1], term.cadetblue1 + out_path + term.normal,
            term.move_xy(int(W/2 - len(text[2])/2), int(H/2 + 1)) + text[2], end='')
        input()

        break

def downloadSingleVideo():
    media_path = os.getcwd()
    output_path = str(Path(media_path + r'/output'))
    not_a_file = True
    error_message = ""
    
    clear()
    
    while not_a_file:

        # This url is no longer active. If anyone manages to find what this image was, let me know!
        # https://static1.e621.net/data/sample/89/85/8985342ea8ff4e4c4692f55e082aadb1.jpg

        url = "https://static1.e621.net/data/e9/3d/e93d6b83f964b3f85e4716c8a862ca67.png"
        print(
            "Please enter a URL, then press enter.\n\nTo return to the main menu, type 'menu', then press enter.\n\n" +
            "Example URL:", term.link(url, url), "\n" + term.move_right(13) + "(CTRL click to open)", end='\n\n'
            )

        uri = input(">> ")
        print()

        if uri.lower() == "menu":
            return

        # Check if the URL is valid
        if not validators.url(uri):
            clear()
            print(term.brown1 + "The URL is not valid. Please check the syntax and try again.", term.normal, end='\n\n')
        else:
            # This snippet allows the text in the tuple to accomodate various URI sizes.
            clear()
            text = ["URI found:", uri, "| Downloading...", "[yt-dlp]"]
            num = countStrings(text)
            print(term.move_xy(int(W/2 - num/2), int(H/2)), text[0], term.cadetblue1 + text[1], term.normal + text[2], "\n\n" + text[3])

            try:
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    ydl.download([uri])
            except FileExistsError:
                os.remove(filename)
            except PermissionError as e:
                error_message = errorHandler(e.args[0], uri)

                if error_message == "success":
                    error_message = ""
                else:
                    clear()
                    text = "ERROR: unable to download last URL, skipping."

                    print(term.move_xy(int(W/2 - len(text)/2), int(H/2)) + term.brown1 + text + term.normal, end='')
                    countdown(3)
            except yt_dlp.DownloadError as e:
                error_message = errorHandler(e.args[0], uri)

                if error_message == "success":
                    error_message = ""
                else:
                    clear()
                    text = "ERROR: unable to download last URL, skipping."

                    print(term.move_xy(int(W/2 - len(text)/2), int(H/2)) + term.brown1 + text + term.normal, end='')
                    countdown(3)
                    error_message = "fail"
            except Exception as e:
                clear()
                print("A fatal error has occured. The URL cannot be downloaded because:\n")
                print(str(e) + "\n")
                print("Please create an issue at the GitHub support page for this program. If the error is self-explanitory, " +
                        "creating an issue is NOT required.\n")
                print("GitHub support page: https://github.com/jose011974/Python-Video-Downloader/issues\n")
                print("Press enter to continue.\n")
                input()

                clear()
                text = "ERROR: unable to download last URL, skipping."

                print(term.move_xy(int(W/2 - len(text)/2), int(H/2)) + term.brown1 + text + term.normal, end='')
                countdown(3)
                
            if error_message == "":
                file_path_list = getListOfFiles(media_path)

                for full_path in file_path_list:
                    filename = os.path.basename(full_path)
                    out_file = str(Path(output_path + r'/' + filename))

                    try:
                        shutil.move(full_path, out_file)
                    except shutil.SameFileError:
                        clear()

                        text = ["A file with the name", "already exists. Would you like to overwrite it? (Y/N)\n"]
                        text_length = countStrings(text) + len(filename)
                        
                        print(term.move_xy(int(W/2 - text_length/2), int(H/2)) + 
                                text[0], term.cadetblue1, filename, term.normal, 
                                text[1], end='\n\n')
                        user_input = input(">> ")

                        if user_input.lower() == "y":
                            shutil.move(full_path, out_file)
                        elif user_input.lower() == "n":
                            clear()
                            return
                        
                clear()

                text = ["Media successfully downloaded and is located at", "Returning to main menu in"]

                print(
                    term.move_xy(int(W/2 - len(text[0])/2), int(H/2 - 2)) + text[0] + "\n\n", 
                    term.move_xy(int(W/2 - len(output_path)/2), int(H/2)) + term.cadetblue1, output_path, term.normal, 
                    term.move_xy(int(W/2 - len(text[1])/2), int(H/2 + 2)) + text[1], end=''
                    )
                
                countdown(5)
                return
            else:
                text = ["Media unsuccessfully downloaded.", "Returning to main menu in"]

                clear()

                print(
                    term.move_xy(int(W/2 - len(text[0])/2), int(H/2 - 1)) + text[0] + "\n\n", 
                    term.move_xy(int(W/2 - len(text[1])/2) - 2, int(H/2 + 2)) + term.red + text[1] + term.normal, end=''
                    )
                
                countdown(5)
                return

def errorHandler(error, uri):
    # yt-dlp provides a more sophisicated error handler. 
    # This function strips out the first 8 characters of the error message, then iterates through the error till a : is found, 
    # at which point the remaining string is compared to a list of pre-defined error messages, 
    # and the appropriate explination of why the error occured is shown to the user.

    counter = -1
    error_message = ""
    error_temp = error[7:]

    # Find a : and remove the prefix of the error message
    for element in error_temp:
        counter = counter + 1
        if element == ":": 
            error_message = error_temp[counter + 2:]
            break
    
    # Show the user an explination of the error and any possible steps they can take to resolve it.

    clear()
    
    if error_message == "":
        print(term.brown1 + "ERROR 0:" + term.normal, "An unknown error has occured. Please create an issue at https://github.com/jose011974/Download-Compress-Media/issues and \n")
        print("include the URL and error message found below in your issue:\n")
        print(uri, "\n")
        print(error)

    # The tweet does not contain a video file, and cannot be downloaded. This is a yt-dlp issue, not mine

    elif error_message == "No video could be found in this tweet":

        result = check_cookies(uri)
        clear()

        if result == "no_browser":
            print(term.brown1 + "ERROR 404-a:" + term.normal, "The Tweet could not be found. This may be fixed by signing into a Twitter account.",
                    "However, a valid browser was not found.\n\n" +
                    "You must install Chrome or Firefox and log in to download this tweet. We apologize for any inconvenience.")        
        elif result == "no_session":
            print(term.brown1 + "ERROR 404-a:" + term.normal, "The Tweet could not be found. This may be fixed by signing into a Twitter account.",
                    "However, valid session could not be authenticated.\n\n" + 
                    "You'll need to sign into Twitter using either Chrome or Firefox. We apologize for any inconvenience.")
        elif result == "no_permission":
            return ""
        elif result == "suppress":
            return "suppress"
        else:
            return "success"

    # Author of tweet has been suspended (banned)

    elif error_message == "Error(s) while querying API: User has been suspended.":
        print(term.brown1 + "ERROR 2:" + term.normal, "The user that posted this tweet has been suspended,",
              "and all tweets are no longer accessible by the public.")
        print("\nURL:", uri)

    # The Tweet was not found. You may need to sign in because Elon.

    elif error_message == "Unable to download webpage: HTTP Error 404: Not Found (caused by <HTTPError 404: 'Not Found'>); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U":
        result = check_cookies(uri)
        clear()

        if result == "no_browser":
            print(term.brown1 + "ERROR 404-a:" + term.normal, "The Tweet could not be found. This may be fixed by signing into a Twitter account.",
                    "However, a valid browser was not found.\n\n" +
                    "You must install Chrome or Firefox and log in to download this tweet. We apologize for any inconvenience.")        
        elif result == "no_session":
            print(term.brown1 + "ERROR 404-a:" + term.normal, "The Tweet could not be found. This may be fixed by signing into a Twitter account.",
                    "However, valid session could not be authenticated.\n\n" + 
                    "You'll need to sign into Twitter using either Chrome or Firefox. We apologize for any inconvenience.")
        elif result == "no_permission":
            return ""
        elif result == "suppress":
            return "suppress"
        else:
            return "success"
    
    # The JSON data for the tweet could not be found. You may need to sign in because Elon

    elif error_message == "Unable to download JSON metadata: HTTP Error 404: Not Found (caused by <HTTPError 404: 'Not Found'>); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U":
        if result == "no_browser":
            print(term.brown1 + "ERROR 404-b:" + term.normal, "The Tweet's JSON data could not be found.",
                    "This may be fixed by signing into a Twitter account, however, a valid browser could not be found.\n\n" +
                    "You must install either Chrome or Firefox and log in to download this tweet. We apologize for any inconvenience.")        
        elif result == "no_session":
            print(term.brown1 + "ERROR 404-b:" + term.normal, "The Tweet's JSON data could not be found.",
                    "This may be fixed by signing into a Twitter account. However, a valid Twitter session could not be authenticated.\n\n" +
                    "You'll need to sign into Twitter using either Chrome or Firefox. We apologize for any inconvenience.")
        elif result == "no_permission":
            return ""
        elif result == "suppress":
            return "suppress"
        else:
            return "success"
    
    # The tweet could not be found. You may need to sign in because Elon.

    elif error_message == "HTTP Error 404: Not Found":
        result = check_cookies(uri)
        clear()

        if result == "no_browser":
            print(term.brown1 + "ERROR 404-c:" + term.normal, "The Tweet could not be found.",
                    "This may be fixed by signing into a Twitter account. However, a valid browser could not be found.\n\n" +
                    "You must install either Chrome or Firefox and log in to download this tweet. We apologize for any inconvenience.")        
        elif result == "no_session":
            print(term.brown1 + "ERROR 404-c:" + term.normal, "The Tweet could not be found.",
                    "This may be fixed by signing into a Twitter account. However, a valid Twitter session could not be authenticated.\n\n" +
                    "You'll need to sign into Twitter using either Chrome or Firefox. We apologize for any inconvenience.")
        elif result == "no_permission":
            return ""
        elif result == "suppress":
            return "suppress"
        else:
            return "success"
        
    # Viewing NSFW tweets requires a Twitter account to view. You need to sign in to view tweets because Elon.

    elif error_message == "Requested tweet may only be available when logged in. Use --cookies, --cookies-from-browser, --username and --password, --netrc-cmd, or --netrc (twitter) to provide account credentials":
        result = check_cookies(uri)
        clear()

        if result == "no_browser":
            print(term.brown1 + "ERROR 4a:" + term.normal, "Twitter requires you to log in to view most NSFW tweets.",
                    "However, a valid browser could not be found.\n\n"
                    "You must install either Chrome or Firefox and log in to download this tweet. We apologize for any inconvenience.")
        elif result == "no_session":
            print(term.brown1 + "ERROR 4b:" + term.normal, "Twitter requires you to log in to see most NSFW tweets.",
                    "However, a valid Twitter session could not be authenticated.\n\n" +
                    "You'll need to sign into Twitter using either Chrome or Firefox. We apologize for any inconvenience.")
        elif result == "no_permission":
            return ""
        elif result == "suppress":
            return "suppress"
        else:
            return "success"

    # Viewing NSFW tweets requires a twitter account to view. You need to sign in to Twitter because Elon.

    elif error_message == "NSFW tweet requires authentication. Use --cookies, --cookies-from-browser, --username and --password, --netrc-cmd, or --netrc (twitter) to provide account credentials. See  https://github.com/yt-dlp/yt-dlp/wiki/FAQ#how-do-i-pass-cookies-to-yt-dlp  for how to manually pass cookies":
        result = check_cookies(uri)
        clear()

        if result == "no_browser":
            print(term.brown1 + "ERROR 4c:" + term.normal, "Twitter requires you to log in to view most NSFW tweets.\n\n" + 
                    "A valid browser could not be found.\n\n" + 
                    "You must install either Chrome or Firefox and log in to download this tweet. We apologize for any inconvenience.")
        elif result == "no_session":
            print(term.brown1 + "ERROR 4d:" + term.normal, "Twitter now requires you to log in to see most NSFW tweets.",
                    "However, a valid Twitter session could not be authenticated.\n\n" +
                    "You'll need to sign into Twitter using either Chrome or Firefox. We apologize for any inconvenience.")
        elif result == "no_permission":
            return ""
        elif result == "suppress":
            return "suppress"
        else:
            return "success"

    # Cookies could not be found. This may occur when a supported browser is not installed in the default location.
    # Regardless, check_cookies will scan Chrome and Firefox in their default locations for a valid session.
        
    elif error_message == "Profile Folder not Found.":
        result = check_cookies(uri)
        clear()

        if result == "no_browser":
            print(term.brown1 + "ERROR 5a:" + term.normal, "The URL could not be authenticated as Chrome or Firefox are not installed.\n\n" + 
                  "In order to download this URL, you will need to install Chrome or Firefox in their default location\n\n" +
                "and log in to the respective website. We apologize for any inconvenience.")
        elif result == "no_session":
            print(term.brown1 + "ERROR 5b:" + term.normal, "The URL could not be authenticated as a valid session was not found.\n\n" +
                "You will need to have Chrome or Firefox installed in their default location, signed into the respective website,",
                 "and try again. We apologize for any inconvenience.")
        elif result == "no_permission":
            return ""
        elif result == "suppress":
            return "suppress"
        else:
            return "success"
        
    elif error_message == "You are not authorized to view this protected tweet. Use --cookies, --cookies-from-browser, --username and --password, --netrc-cmd, or --netrc (twitter) to provide account credentials":
        clear()

        print(term.brown1 + "ERROR 6:" + term.normal, "The tweet you are trying to view is protected. " +
              "You will NOT be able to download it using this program.\n\nYour options inlcude screen recording, using the Web Debugger of your browser, " +
              "or using a browser extension.")
    
    
    # A fatal error has occured. Just in case its with a specific tweet, we allow the program to continue exectution.
        
    else:
        result = check_cookies(uri)
        clear()

        if result == "no_permission":
            return ""
        elif result == "suppress":
            return "suppress"
        elif result == "success":
            return "success"
        else:
            print(term.brown1 + "ERROR 0a:" + term.normal, "An fatal error has occured. Please create an issue at https://github.com/jose011974/Download-Compress-Media/issues and \n")
            print("include the URL and error message found below in your issue:\n")
            print(uri, "\n")
            print(error)  

    print("\nIf you would like to supress error messages, type 'suppress', otherwise, press enter to continue.\n")

    user_input = input(">> ")

    if user_input.lower() == "suppress":
        return user_input
            
    clear()

def getFileSize(file):
    # Get the file size and convert to MB

    file_size = os.path.getsize(file)
    file_size = float("{:.2f}".format(file_size / 1024))

    return file_size

def getListOfFiles(folder): 
    # Using a comprehensive list, we can filter out valid file names and return them as a list

    # Scan the folder provided by the user
    file_list = os.listdir(folder)

    # For each element in f, check if f is a valid file by:
        # 1. Checking if the joined path (folder + f) points to a file
        # 2. The lowercase version of the file ends with any specified extension in file_types
    filenames = [
    f
    for f in file_list
        if os.path.isfile(
            os.path.join(folder, f))
            and
            f.lower().endswith(file_types)
    ]

    return filenames

    # Credit to the original source code: 
    # https://github.com/PySimpleGUI/PySimpleGUI/blob/1fa911cafee687ef50e024b580d5351c398ef7d1/DemoPrograms/Demo_Img_Viewer.py#L36


def main():
    while True:

        os.chdir(Path(__file__).parent.resolve()) # Change the path back to the path the script is running from

        clear()

        print(
            "This script provides the ability to download images and videos. Multiple and Single download modes are available to you." +
            "\n\nThe following media types have been tested: " + term.cadetblue1 + "jpg/jpeg, png, gif, mp4, and webm." + term.normal +
            "\n\nAny other formats should work, however they have been untested. " + term.orangered + "\n\nProceed at your own risk. " + 
            "I am not responsible for any loss of data due to neglect. This script is in beta, so bugs WILL be present." + term.normal +
            "\n\nPlease type the option that works best for you and press enter:\n\n" + term.cadetblue1 + "Note: Compression is no longer available " +
            "as better alternatives exist. Also Discord is gay for reducing file uploads to 10 MB.\n" + term.normal
        )
        
        print("1. Single Video")
        print("2. Multiple Videos")
        print("3. Single Image")
        print("4. Multiple Images")
        print("5. Spoil Media")
        print("6. No Spoil Media")
        print("7. Open Unsupported URLs")
        print("8. Help")
        print("9. Exit")
        print("0. Update Dependencies\n")

        try:
            user_input = int(input(">> "))

            if user_input == 1:
                downloadSingleVideo()
            elif user_input == 2:
                clear()

                print("Please make a selection:\n\n" + 
                    "1. Add links manually\n" +
                    "2. Use 'URL.txt'\n")
                
                user_input = int(input(">> "))

                if user_input == 1:
                    clear()

                    print("Note: Please ensure you have your media ready to copy. The method of grabbing links uses a semi-automated process that involves the " +
                          "left and middle mouse button.")
                    print("\nPress Enter to continue.")

                    input()
                    
                    urlGrabber(0)
                elif user_input == 2:
                    downloadMultipleVideos(0)

            elif user_input == 3:
                downloadSingleImage()
            elif user_input == 4:
                clear()

                print("Please make a selection:\n\n" + 
                    "1. Add links manually\n" +
                    "2. Use 'URL.txt'\n")
                
                user_input = int(input(">> "))

                if user_input == 1:
                    clear()

                    print("Note: Please ensure you have your media ready to copy. The method of grabbing links uses a semi-automated process that involves the " +
                          "left and middle mouse button.")
                    print("\nPress Enter to continue.")

                    input()
                    
                    urlGrabber(1)
                elif user_input == 2:
                    downloadMultipleImages()
            elif user_input == 5:
                spoilMedia(1)
            elif user_input == 6:
                spoilMedia(0)
            elif user_input == 7:
                openUnsupportedURLs()

            elif user_input == 8:
                webbrowser.open("https://github.com/jose011974/Download-Compress-Media", new=1)

                clear()

                print("The Github page should have opened. If it did not, please go to https://github.com/jose011974/Download-Compress-Media (CTRL click to open)\n")
                print("Press enter to continue.\n")
                input()

            elif user_input == 9:
                clear()
                print("Exiting...\n")
                sys.exit()
            elif user_input == 0:
                clear()

                text = "Updating Dependencies..."
                print(term.move_xy(int(W/2 - len(text)/2), int(H/2)) + term.darkseagreen1 + text + term.normal + "\n")
                time.sleep(1)

                packages = ["blessed", "numpy", "python-magic", "Pillow", "psutil", "pyperclip", "pynput", "requests", "validators", "yt-dlp"]
                if platform.system() == "Windows":
                    packages.append("python-magic-bin")

                for p in packages:
                    try:
                        subprocess.check_call([sys.executable, "-m", "pip", "install", p, "--upgrade", "--user"])
                    except Exception as e:
                        clear()

                        print("An error has occured while updating packages:\n\n", e, "\n\n Please create an issue at",
                              "https://github.com/jose011974/Python-Video-Downloader/issues")
                
                 # In case there is an update available for pip, we install it.
                try:
                    if platform.system() == "Linux":
                        subprocess.check_call(['python3', '-m', 'pip', 'install', '--upgrade', 'pip'])
                    elif platform.system() == "Windows":
                        subprocess.check_call(['python', '-m', 'pip', 'install', '--upgrade', 'pip'])
                except Exception as e:
                    clear()

                    print("An error has occuired when upgrading pip. Pip will not be upgraded.")

                clear()
                text = "Dependencies updated."
                print(term.move_xy(int(W/2 - len(text)/2), int(H/2)) + term.darkseagreen1 + text + term.normal, end='')

                countdown(3)
            
            clear()
        except ValueError:
            clear()
            print("You have entered an invalid entry. Please try again.\n")
            continue





def on_click(x, y, button, pressed):
    global listener
    global URI
    
    if button == mouse.Button.left:
        if pressed:
            pass
        else:
            time.sleep(0.4)
            clipboard = read_clipboard()

            if clipboard.strip() != "" and validators.url(clipboard):
                URI.append(clipboard)
                print("URL:", clipboard)
        
    if button == mouse.Button.middle:
        if not pressed:
            os.chdir(os.path.dirname(__file__))
            filename = "URL.txt"

            with open(filename, 'w') as file:
                for i in URI:
                    file.write(i + "\n")

            
            listener.stop()

def openUnsupportedURLs():
    un_url_textfile = 'Unsupported URLs.txt'

    if not os.path.isfile(un_url_textfile):
        clear()

        text = ["Unsupported URLs.txt", "was not found. Returning to the main menu in:"]
        print(term.move_xy(int(W/2 - 65/2),
                           int(H/2)) + term.cadetblue1 + text[0],
                           term.normal + text[1], end='')
        countdown(5)
        return
    
    URLs = list()
    with open('Unsupported URLs.txt', 'r') as file:
        lines = file.readlines()

    for line in lines:
        URLs.append(line.strip())

    if len(URLs) == 0:
        clear()

        text = ["There were no URLs detected.", "Press enter to continue."]

        print(
            term.move_xy(int(W/2 - len(text[0])/2), 
                         int(H/2 - 1)) + text[0],
            term.move_xy(int(W/2 - len(text[1])/2), 
                         int(H/2 + 1)) + text[1])
        input()
        return

    counter = 1
    url_counter = 0
    clear()

    text = ["All of the URLs in 'Unsupported URLs.txt' will be opened 10 at a time.", "Press enter to continue."]

    print(
        term.move_xy(int(W/2 - len(text[0])/2), 
                     int(H/2 - 1)) + text[0],
        term.move_xy(int(W/2 - len(text[1])/2), 
                     int(H/2 + 1)) + text[1]
    )
    input()

    while True:
        if counter == len(URLs) + 1:
            break

        for URL in URLs:
            clear()

            print("OPENING", counter, "OUT OF", len(URLs))
            webbrowser.open(URL, new=0, autoraise=False)
            time.sleep(0.4)
            counter = counter + 1
            url_counter = url_counter + 1

        if url_counter >= 10:
            clear()
            print("Opened 10 URLs. Press enter to continue.")
            input()
            url_counter = 0

    clear()
    print("Process complete. Press enter to continue.")

def read_clipboard():
    try:
        return pyperclip.paste()
    except Exception as e:
        errorHandler(e, "No URI - Error on reading Clipboard")




def spoilMedia(option):
    clear()

    media_path = workingDirectory()

    if media_path == "menu":
        return

    file_list = getListOfFiles(media_path)

    if option == 1:
        text = ["I will now apply the 'SPOILER_' prefix to the files in", "Files with the prefix in place will not be touched.",
                "Press enter to continue"]
        print(
            term.move_xy(int(W/2 - len(text[0])/2), int(H/2 - 3)) + text[0],
            term.move_xy(int(W/2 - len(media_path)/2), int(H/2 - 1)) + term.cadetblue1 + media_path + term.normal, 
            term.move_xy(int(W/2 - len(text[1])/2), int(H/2 + 1)) + text[1], end=''
        )
        print
        input(term.move_xy(int(W/2 - len(text[2])/2), int(H/2 + 3)) + text[2])

        for file in file_list:
            if file.startswith("SPOILER_"):
                pass
            else:
                os.replace(file, "SPOILER_" + file)

    elif option == 0:
        text = ["I will now remove the 'SPOILER_' prefix to the files in", "Files without the prefix in place will not be touched.",
                        "Press enter to continue"]
        print(
            term.move_xy(int(W/2 - len(text[0])/2), int(H/2 - 3)) + text[0],
            term.move_xy(int(W/2 - len(media_path)/2), int(H/2 - 1)) + term.cadetblue1 + media_path + term.normal, 
            term.move_xy(int(W/2 - len(text[1])/2), int(H/2 + 1)) + text[1], end=''
        )
        print
        input(term.move_xy(int(W/2 - len(text[2])/2), int(H/2 + 3)) + text[2])

        for file in file_list:
            if file.startswith("SPOILER_"):
                new_filename = file[len("SPOILER_"):]
                os.replace(file, new_filename)
                pass
            else:
                pass
            

    clear()

    text = ["Procedure complete. The files are located at:", "Press Enter to continue."]

    print(
        term.move_xy(int(W/2 - len(text[0])/2), int(H/2 - 2)) + text[0],
        term.move_xy(int(W/2 - (len(media_path))/2), int(H/2)) + term.cadetblue1 + media_path + term.normal, end=''
        )

    print(term.move_xy(int(W/2 - len(text[1])/2), int(H/2 + 2)) + text[1])
    input()

def title():

    # Create a title bar based on the console window size

    title = "[Python Video Downloader.py v1.13 - 'The best downloader in town!']"
    consoleSize = shutil.get_terminal_size()
    col = int(consoleSize[0])-len(title)

    for x in range(0, int(col/2)):
        print("-", end = '')

    print(title, end = '')

    for x in range(0, int(col/2)):
        print("-", end='')

    print("\n")

def updateDependencies():
    try:
        clear()
        print("Checking for pip installation...\n")

        subprocess.run(['pip3'])
        clear()
        print("pip was sucessfuly detected... checking dependencies...\n")
        reqs = subprocess.check_output([sys.executable, '-m', 'pip', 'freeze'])
        installed_packages = [r.decode().split('==')[0] for r in reqs.split()]
    except FileNotFoundError:
        try:
            import requests
        except ModuleNotFoundError:
            clear()
            print("I was unable to detect an installation of pip, or it is not in your system's PATH.")

            if platform.system() == "Windows":
                print("\nYour OS is: Windows.\n\nA simple way to install pip, is via a script. Please go to: https://bootstrap.pypa.io/get-pip.py",
                "\n\nIf you see a large wall of text, copy and paste the code into a text file and save it as 'get-pip.py'",
                "\n\nIf you do not use the .py extension, the script will not run. Once pip is installed, run this script again.",
                "\n\nIf you encounter any issues, please go to: https://github.com/jose011974/Download-Compress-Media/wiki/Create-a-Bug-Report\n")
            elif platform.system() == "Linux":
                print("\nYour system is: Linux.\n\nThe recommended way to install pip is via your terminal. You can find common commands below:",
                "\n\nUbuntu: sudo apt install python3-pip\n",
                "\nCentOS/Fedora/Redhat: sudo dnf install python3\n",
                "\nArch/Manjaro: sudo pacman -S python-pip\n",
                "\nOpenSUSE: sudo zypper install python3-pip\n",
                "\n\nIf you would like to install pip using a script, please go to https://bootstrap.pypa.io/get-pip.py\n")
            
            input("Press enter to exit.")
            
            sys.exit()

        url = "https://bootstrap.pypa.io/get-pip.py"
        response = requests.get(url, allow_redirects=True)
        pip_file = str(Path(os.getcwd() + r'/' + "get-pip.py"))

        print("\npip, python's package manager, is not installed on your system. I will attempt to download and install it for you.\n")
        time.sleep(3)

        if not response.status_code == 200:
            command = 'clear' # Unix
            if platform.system() == "Windows": command = 'cls' # Windows
            os.system(command)

            print("I was unable to download pip. Please install pip manually (Google is your friend) or from " +
            "https://bootstrap.pypa.io/get-pip.py and execute the script. Exiting...")
            sys.exit()
        try:
            open(pip_file, 'wb').write(response.content)
            if platform.system() == "Linux": 
                print("\n\nA pip install script must be executed in order to install pip. \n\nDue to security restrictions,",
                "the get-pip.py script is not able to be executed by default. \n\nIn order to allow execution, administrator access is required. \n\nIf you feel comfortable",
                "allowing admin access, type 'y' then press enter. Otherwise, type 'n' and press enter to exit the script.",
                "\n\nYou will need to execute the script manually. The script is located at:", pip_file)
                
                user_input = input(">> ")

                print()

                if user_input.lower() == "yes" or user_input == "y":
                    subprocess.call(['sudo', 'chmod', '777', 'get-pip.py'])
                    subprocess.check_call([os.system("python3 ./get-pip.py")])
                elif user_input.lower() == "no" or user_input == "n":
                    print("\nExiting...")
                    sys.exit()
                else:
                    print("\nYou have entered an invalid entry. Please execute the script again.")
                    sys.exit()
                
            elif platform.system() == "Windows":
                subprocess.check_call([os.system("python get-pip.py")])
                print("\nPip should have installed sucessfully. If pip did not install successfully, or you keep seeing this message, you will want to",
                      "troubleshoot your installation. Please go to: https://github.com/jose011974/Python-Video-Downloader/issues to create",
                      "an issue.")
                sys.exit()

        except subprocess.CalledProcessError as e:
            print("\nAn unknown error has occured. Please file a bug report at",
            "https://github.com/jose011974/Download-Compress-Media/wiki/Create-a-Bug-Report",
            "and be sure to include a copy of the terminal output.\n\n",
            "Error:\n\n",
            str(e))
            
            sys.exit()
        except TypeError as e:
            print("\nPip should have installed sucessfully. If pip did not install successfully, or you keep seeing this message, you will want to",
                    "troubleshoot your installation. Please go to: https://github.com/jose011974/Python-Video-Downloader/issues to create",
                    "an issue.")
            sys.exit()

    packages = ["blessed", "numpy", "python-magic", "Pillow", "psutil", "pyperclip", "pynput", "requests", "validators", "yt-dlp"]

    # Turns out the library needed for magic on Windows has been out of date since 2009. 
    # These new packages are up to date and will work with Windows 10.
    if platform.system() == "Windows":
        packages.append("python-magic-bin")

    # Check if the packages are installed

    for p in packages:
        if not p in installed_packages:
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", p])
            except Exception as e:
                print(e)
    clear()
    print("Dependencies validated. It is recommended to update your dependencies every few weeks.")
    time.sleep(2)

def urlGrabber(x):

    global listener
    global URI
    URI = []

    clear()

    print("Do you wish to empty your clipboard? (y/n)\n")
    userInput = input(">> ")
    if userInput.lower() == "y":
        pyperclip.copy('')
    
        print("\nClipboard has been cleared.\n")

    time.sleep(3)

    clear()

    print("NOTE: Pressing left click at this point will add whatever URL you have in your clipboard to the program list.\n")

    print("This program allows you to easily create a URL.txt file for Python Video Downloader by PineCone.\n")
    print("Instructions: Copy a URL, left click anywhere, and you will see the URL you copied. Press the middle mouse button when you are done.")
    print("Note: Pressing left click will freeze your mouse for less than a second. There is also a clipboard filter, meaning that only URL's will be written.\n")

    # with mouse.Listener(on_click=on_click) as listener:
        # listener.join()

    listener = mouse.Listener(on_click=on_click)
    listener.start()
    listener.join()

    clear()
    print("URL.txt created! Downloading media...", end='')

    if x == 0:
        downloadMultipleVideos(1)
    elif x == 1:
        downloadMultipleImages()


def workingDirectory():
    # Changes the current working directory to the user supplied directory

    current_dir = os.getcwd()
    clear()

    while True:
        
        text = "(CTRL click to open the path)"

        print("Please type the directory path that contains the media you wish to convert:\n")
        print("To return to the main menu, type 'menu'\n")
        print(
            "Current directory:", term.cadetblue1 + term.link(current_dir, current_dir) + "\n" + term.normal +
             term.move_x(0) + term.move_right(19) + text, end='\n\n'
        )

        user_dir = input(">> ")

        if user_dir.lower() == "menu":
            return "menu"
        else:
            # Check if the user specified path is valid and double triple check the user entered the correct path
            user_dir = str(Path(user_dir))

            if os.path.isdir(user_dir):
                clear()
                print("You have entered", term.cadetblue1 + term.link(user_dir, user_dir), term.normal + "Is this correct? [y/n]\n")
                print("To return to the main menu, type 'menu'\n")

                user_input = input(">> ").lower()

                if user_input == "yes" or user_input == "y" or user_input == "":
                    while True:
                        try:
                            # Create an 'output' folder at the user specified path and return the value to the function
                            clear()
                            try:
                                os.mkdir(Path(user_dir + r'/output'))
                            except FileExistsError:
                                pass

                            print("Source media location changed to:", term.cadetblue1 + user_dir + "\n" + term.normal)
                            os.chdir(user_dir)
                            return user_dir
                        except PermissionError: # Uh oh.
                            clear()
                            print(
                                term.brown1 + "An error has occured: Missing read/write permissions.\n\n" + term.normal + "Please make sure you have read and write access to " + 
                                term.normal + term.cadetblue1 + current_dir + term.normal + " in order to allow critical functions to operate without issue. \n\n" +
                                "To try again, type y. If you would rather instead use the path the script is located at, type 'n'. " +
                                "To return to the main menu, type 'menu'\n\n" + term.turquoise + "If you keep seeing this screen, you may need to troubleshoot further.\n" + 
                                "Go to the GitHub page for more information." + term.normal
                            )

                            user_input = input(">> ").lower()

                            if user_input == "yes" or user_input == "y":
                                continue
                            elif user_input == "no" or user_input == "n":
                                return current_dir
                            elif user_input == "menu":
                                return "menu"
                            else:
                                # The program exits as there are no permissions to read/write anyways
                                clear()
                                print(term.brown1 + "Invalid entry entered. Exiting.\n" + term.normal)
                                sys.exit()
            else:
                clear()
                print(term.brown1 + "You have entered an invalid path. Please try again.\n" + term.normal)

# Logger for yt-dlp
class MyLogger(object):
    def debug(self, msg):
        print(msg)

    def warning(self, msg):
        print(msg)

    def error(self, msg):
        global error_message
        error_message = msg

def downloadStatus(d):
    if d['status'] == 'finished': # Download status complete
        
        #downFileList.append(d['filename'])

        print("\nDownloading complete.\n")

# Parameters for yt-dlp.
# See https://github.com/yt-dlp/yt-dlp/blob/5ab3534d44231f7711398bc3cfc520e2efd09f50/yt_dlp/YoutubeDL.py#L159
ydl_opts = {
    'outtmpl': f'%(id)s.%(ext)s',
    'restrictfilenames': True,
    'no_color': True,
    'logger': MyLogger(),
    'progress_hooks': [downloadStatus],
}

# ---------------------------------

updateDependencies()

# The magic package has some weird quirks with it. Restarting fixes these quirks. Usually.

try:
    import magic
except:
    clear()
    title()

    print("In order to complete dependency installation, you must restart this script.\n\n",
          "If you keep seeing this message, restart your computer.")
    sys.exit()

import blessed
import pyperclip
import requests
import validators
import yt_dlp

from datetime import datetime
from numpy import char
from pynput import mouse
from shutil import which

global error_message

term = blessed.Terminal()
W,H = term.width, term.height

while True:
    clear()

    # Creates required files and folders.
    # url_text_path - A text file used to iterate through multuple URLs for download
    # Unsupported URLs.txt - When a download fails or a URL is not supported by yt-dlp, it is added to this text file
    # output_path - Stores any downloaded files as to not clog the main directory

    url_text_path = str(Path('URL.txt'))
    unsupp_url_path = str(Path('Unsupported URLs.txt'))
    output_path = str(Path('output'))

    try:
        if not os.path.exists(url_text_path):
            fp = open(url_text_path, 'x')
            fp.close()
        if not os.path.exists(unsupp_url_path):
            fp = open(unsupp_url_path, 'x')
            fp.close()
        if not os.path.exists(output_path):
            os.mkdir(output_path)
    except PermissionError: # No read/write permissions
        clear()
        print(
            term.brown1 + "An error has occured: Missing read/write permissions.\n\n" + term.normal + "Please make sure you have read and write access to " + 
            term.normal + term.cadetblue1 + os.getcwd() + term.normal + " in order to allow critical functions to operate without issue. \n\n" +
            "To try again, type y. If you would rather instead use the path the script is located at, type 'n'. " +
            "To return to the main menu, type 'menu'\n\n" + term.turquoise + "If you keep seeing this screen, you may need to troubleshoot further.\n" + 
            "Go to the GitHub page for more information." + term.normal
            )
        
        sys.exit()

    main()